#!/usr/bin/python

from asyncio.subprocess import DEVNULL
import subprocess
import sys
import os
import time
from sigfig import round as round_fig

os.environ["WAKE_TTY"] = "/dev/ttyS0"
os.environ["WAKE_BAUDRATE"] = "57600"

REFRESH_TIME_S = 2
SCREEN_SHOW_TIME_S = 15

def get_uptime():
    with open('/proc/uptime', 'r') as f:
        uptime_seconds = float(f.readline().split()[0])

    return int(uptime_seconds)

intervals = (
    ('M', 2592000),  # 60 * 60 * 24 * 30
    ('d', 86400),    # 60 * 60 * 24
    ('h', 3600),     # 60 * 60
    ('m', 60),
    ('s', 1),
)

def display_time(seconds, granularity=2):
    result = []

    for name, count in intervals:
        value = seconds // count
        if value:
            seconds -= value * count
            result.append("{}{}".format(value, name))
    return ' '.join(result[:granularity])

def format_uptime_loadavg():
    line1 = str.format("{:.2f} {:.2f} {:.2f}", *os.getloadavg()).center(16)
    line2 = (display_time(get_uptime(), 4)).ljust(16)
    return line1 + line2

def format_netload():
    command = f'ifstat -n -i enp1s0 {REFRESH_TIME_S} 1'
    output = subprocess.run(command.split(), capture_output=True)
    def normalize(val):
        return round(round_fig(float(val)/1024, sigfigs=4, warn=False), 2)
    down, up = map(normalize, output.stdout.splitlines()[-1].split())
    line1 = " DOWN  MB/s   UP"
    line2 = f'{down:>5g}      {up:>5g}'
    return line1 + line2

prefix = "wcli -a 0 -c 47 -d 0 -s"
screens = (format_uptime_loadavg, format_netload)
counter = 0
while True:
    start_time = time.time()
    cur_screen = counter // SCREEN_SHOW_TIME_S
    content = screens[cur_screen]()
    subprocess.run([*prefix.split(), content], stdout=DEVNULL)
    counter += REFRESH_TIME_S
    if counter >= SCREEN_SHOW_TIME_S * len(screens):
        counter = 0
    time_spend = time.time() - start_time
    if time_spend < REFRESH_TIME_S:
        time.sleep(REFRESH_TIME_S - time_spend)
